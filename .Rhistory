q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
z*2 + 100
info()
skip()
my_div
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files)
ls()
old.dir <- getwd()
dir.create("testdir")
setwd
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", file.path("testdir2", "testdir3", recursive = TRUE))
ls()
dir.create(file.path("testdir2", "testdir3", recursive = TRUE))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
set(old.dir)
setwd(old.dir)
?unlink
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
?vector
as.vector(c(0.5, 55, -10, 6), mode="numeric")
?c
c(0.5, 55, -10, 6)
info()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "AnVo")
my_name
paste()
paste(my_name, collapse = " ")
paste("Heollo","World!", sep = " ")
paste("Hello","World!", sep = " ")
paste("Hello", "World!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTER, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vetc <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecttor
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
info()
bye()
library(swirl)
ls()
rm(list=ls())
info()
swirl()
TRUE == TRUE
(FALSE == FALSE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
6 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, TRUE, TRUE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
int > 5
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
means(c(2,4,5))
mean(c(2,4,5))
info()
bye()
library("swirl")
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num / 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(functional(x){x+1}, c(8, 4, 0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hello")
submit()
submit()
submit()
mad_libs("SG", "hot", "football")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Syst.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
clas(t2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(Sys.Date())
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
t1 - Sys.time()
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
x > 5
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?gl
?interaction
?str
?invisible
?lm
swirl()
library("swirl")
rm(list=ls())
?library
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_lsit
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes < flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply
sapply(flags, unique)
lapply((unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$ref, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
summary(iris)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
?colMeans
?rowMeans
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
?iris
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcar$hp,mtcars$cyl, mean)
tapply(mtcars$hp,mtcars$cyl, mean)
debug(ls)
ls
?ls
ls(mtcars)
?<<-
?'<<-'
?matrix
?solve
matrixData <- matrix(c(1,2,3,0,1,4,,5,6,0), nrow = 3, ncol = 3)
matrixData <- matrix(c(1,2,3,0,1,4,5,6,0), nrow = 3, ncol = 3)
matrixData
matrixData <- matrix(c(1,0,5,2,1,6,3,4,0), nrow = 3, ncol = 3)
matrixData
source('G:/Data Science Specialization/Course 2 - R Programming/Week 3/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
cachedMatrix <- makeCacheMatrix(matrixData)
cacheSolve(cachedMatrix)
cacheSolve(cachedMatrix)
cachedMatrix1 <- makeCachedMatrix(matrixData)
cachedMatrix1 <- makeCacheMatrix(matrixData)
cacheSolve(cachedMatrix1)
cacheSolve(cachedMatrix1)
matrixData1 <- matrix(c(7,0,-3,2,3,4,1,-1,-2), nrow = 3, ncol = 3)
cachedMatrix2 <- makeCacheMatrix(matrixData1)
cacheSolve(cachedMatrix1)
matrixData1
cacheSolve(cachedMatrix2)
cacheSolve(cachedMatrix2)
cachedMatrix3 <- makeCacheMatrix(matrixData1)
cacheSolve(cachedMatrix3)
cacheSolve(cachedMatrix3)
setwd("G:/Data Science Specialization/Course 2 - R Programming/Week 3/ProgrammingAssignment2")
matrixData1 <- matrix(c(7,0,-3,2,3,4,1,-1,-2), nrow = 3, ncol = 3)
cacheSolve(cachedMatrix1)
cacheSolve(cachedMatrix1)
